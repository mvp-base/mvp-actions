name: Deploy Workflow

on:
  workflow_call:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project code
        uses: actions/checkout@v4
    
      - uses: Infisical/secrets-action@v1.0.9
        with:
          method: "universal"
          client-id: ${{ secrets.INFISICAL_IDENTITY_ID }}
          client-secret: ${{ secrets.INFISICAL_IDENTITY_SECRET }}
          domain: ${{ secrets.INFISICAL_URL }}
          env-slug: "prod"
          project-slug: ${{ github.event.repository.name }}
          export-type: "file"
          file-output-path: ".env"

      - name: Parse arguments and variables
        id: prep
        run: |
          set -euo pipefail

          RAW_ENV="/home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}.env"
          FINAL_ENV=".env.final"
          BUILD_ARGS=""
          
          cp "$RAW_ENV" "$FINAL_ENV"

          while IFS= read -r line; do
            echo "LINE: $line"
            [[ -z "$line" || "$line" == \#* ]] && continue
            if [[ "$line" == NEXT_PUBLIC_* ]]; then
              NAME=$(cut -d= -f1 <<< "$line")
              VALUE=$(cut -d= -f2- <<< "$line" | sed "s/^['\"]//;s/['\"]$//")
              echo "Adding build arg: $NAME=$VALUE"
              BUILD_ARGS="$BUILD_ARGS --build-arg ${NAME}=${VALUE}"
            fi
          done < "$RAW_ENV"

          REF="${{ github.ref }}" 
          TAG_NAME="${REF##*/}"
          REPO_NAME="${{ github.event.repository.name }}"
          CONTAINER_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${CONTAINER_NAME}:${TAG_NAME}"
          APP_DIR="${{ secrets.BASE_DEPLOY_PATH }}${CONTAINER_NAME}"

          printf "\nTAG_NAME=%s\n" "$TAG_NAME" >> "$FINAL_ENV"

          echo "tag-name=${TAG_NAME}" >> $GITHUB_ENV
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "container-name=${CONTAINER_NAME}" >> $GITHUB_ENV
          echo "build-args=${BUILD_ARGS}" >> $GITHUB_ENV
          echo "app-dir=${APP_DIR}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          set -euo pipefail
          eval docker build -f Dockerfile.prod ${{ env.build-args }} -t "${{ secrets.DOCKER_REPO }}/${{ env.image-name }}" .
          docker push "${{ secrets.DOCKER_REPO }}/${{ env.image-name }}"

      - name: Prepare deploy artifacts
        run: |
          mkdir -p ${{ env.container-name }}
          cp docker-compose.prod.yml ${{ env.container-name }}/docker-compose.yml
          cp .env.final ${{ env.container-name }}/.env

      - name: Check app dir and Stop previous version (if running)
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail

            APP_DIR="${{ env.app-dir }}"

            if [ -f "$APP_DIR/docker-compose.yml" ]; then
              docker compose -f "$APP_DIR/docker-compose.yml" down --remove-orphans || true
            fi

            rm -rf "$APP_DIR"

      - name: Upload docker-compose and env
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ env.container-name }}"
          target: "${{ secrets.BASE_DEPLOY_PATH }}"
          strip_components: 0

      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -euo pipefail

            APP_DIR="${{ env.app-dir }}"

            chmod 600 "$APP_DIR/.env"
            chmod 644 "$APP_DIR/docker-compose.yml"

            docker compose -f "$APP_DIR/docker-compose.yml" up -d --pull always --remove-orphans

            echo "Deployment complete."


name: Deploy Workflow

on:
  workflow_call:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project code
        uses: actions/checkout@v4
    
      - uses: Infisical/secrets-action@v1.0.9
        with:
          method: "universal"
          client-id: ${{ secrets.INFISICAL_IDENTITY_ID }}
          client-secret: ${{ secrets.INFISICAL_IDENTITY_SECRET }}
          domain: ${{ secrets.INFISICAL_URL }}
          env-slug: "prod"
          project-slug: ${{ github.event.repository.name }}
          export-type: "file"
          file-output-path: ".env"

      - name: Debug check .env.infisical
        run: |
          ls -la
          cat /home/runner/work/mvp-api-gateway/mvp-api-gateway.env

      - name: Parse arguments and variables
        id: prep
        run: |
          set -euo pipefail

          BUILD_ARGS=""
          ENV_FILE=""

          while IFS='=' read -r key value; do 
            if [[ "$key" == NEXT_PUBLIC_* ]]; then
              BUILD_ARGS="$BUILD_ARGS --build-arg ${key}=${value}"
            else 
              ENV_FILE="${ENV_FILE}${key}=${value}\n"
            fi  
          done < /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}.env
          
          REF="${{ github.ref }}" 
          TAG_NAME="${REF##*/}"
          REPO_NAME="${{ github.event.repository.name }}"
          CONTAINER_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${CONTAINER_NAME}:${TAG_NAME}"
          APP_DIR="${{ secrets.BASE_DEPLOY_PATH }}${CONTAINER_NAME}"

          ENV_FILE="${ENV_FILE}TAG_NAME=${TAG_NAME}\n"

          echo -e "$ENV_FILE" > .env.final

          echo "tag-name=${TAG_NAME}" >> $GITHUB_ENV
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "container-name=${CONTAINER_NAME}" >> $GITHUB_ENV
          echo "build-args=${BUILD_ARGS}" >> $GITHUB_ENV
          echo "app-dir=${APP_DIR}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          set -euo pipefail
          docker build -f Dockerfile.prod ${{ env.build-args }} -t "${{ secrets.DOCKER_REPO }}/${{ env.image-name }}" .
          docker push "${{ secrets.DOCKER_REPO }}/${{ env.image-name }}"

      - name: Prepare deploy artifacts
        run: |
          mkdir -p ${{ env.tag-name }}
          cp docker-compose.prod.yml ${{ env.tag-name }}/docker-compose.yml
          cp .env.final ${{ env.tag-name }}/.env

      - name: Check target directory on server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            APP_DIR = ${{ env.app-dir }}
            TAG_DIR = ${APP_DIR}/${{ env.tag-name }}
            
            if [-d "$TAG_DIR" ]; then 
              rm -rf "$TAG_DIR"
            fi 

            mkdir -p "$APP_DIR"

      - name: Upload docker-compose and env
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./${{ env.tag-name }}
          target: "${{ env.app-dir }}"
          strip_components: 0

      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -euo pipefail
            
            cd "${{ env.app-dir }}/${{ env.tag-name }}"
            chmod 600 .env 
            chmod 644 docker-compose.yml
            docker compose up -d --pull always --remove-orphans

            echo "Deployment complete."

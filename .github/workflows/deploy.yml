name: Deploy Workflow

on:
  workflow_call:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project code
        uses: actions/checkout@v4
      
      - name: Prepare variables and build args
        id: prep
        run: |
          BUILD_ARGS=""
          ENV_FLAGS=""
          
          for VAR in $(env); do 
            if [[ "$VAR" =~ ^ARG_ ]]; then 
              BUILD_ARGS="$BUILD_ARGS --build-arg ${VAR}=${!VAR}"
            fi

            if [[ "$VAR" =~ ^ENV_ ]];then 
              ENV_FLAGS="$ENV_FLAGS export ${VAR}=${!VAR};"   
            fi
          done

          REF="${{ github.ref }}"
          TAG_NAME="${REF##*/}"
          REPO_NAME="${{ github.event.repository.name }}"
          CONTAINER_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${CONTAINER_NAME}:${TAG_NAME}"

          echo "image-name=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "container-name=${CONTAINER_NAME}" >> $GITHUB_ENV
          echo "build-args=${BUILD_ARGS}" >> $GITHUB_ENV
          echo "env-flags=${ENV_FLAGS}" >> $GITHUB_ENV


      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -f Dockerfile.prod ${{ env.build-args }} -t "${{ secrets.DOCKER_REPO }}/${{ env.image-name }}" .
          docker push "${{ secrets.DOCKER_REPO }}/${{ env.image-name }}"
      
      - name: Update docker-compose.prod.yml with correct image
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKER_REPO }}/${{ env.image-name }}|g" docker-compose.prod.yml

      - name: Commit updated docker-compose.prod.yml to the tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git fetch origin ${{ github.ref }}
          git checkout ${{ github.ref }}
          
          git add docker-compose.prod.yml
          git commit -m "Update docker-compose.prod.yml with image: ${{ env.image-name }}"
          
          git push origin HEAD:${{ github.ref }}

      - name: Copy docker-compose.yml to target server
        run: |
          scp -i <(echo "${{ secrets.SSH_PRIVATE_KEY }}") -o StrictHostKeyChecking=no ./docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/docker-compose-${{ env.image-name }}.yml

      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            if [ ! -d "/srv/mvp-infra/${{ env.container-name }}" ]; then
              mkdir -p /srv/mvp-infra/${{ env.container-name }}
            fi
            
            mv /tmp/docker-compose-${{ env.image-name }}.yml /srv/mvp-infra/${{ env.container-name }}/docker-compose.yml

            cd /srv/mvp-infra/${{ env.container-name }}
            
            eval "${{ env.env-flags }}"
            export IMAGE_NAME="${{ env.image-name }}"
            
            docker compose up -d --remove-orphans --pull always          

            echo "Deployment complete."

